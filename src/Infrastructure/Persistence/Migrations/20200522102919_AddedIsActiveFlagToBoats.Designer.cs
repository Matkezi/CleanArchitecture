// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkipperAgency.Infrastructure.Persistence;

namespace SkipperAgency.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SkipperAgencyDbContext))]
    [Migration("20200522102919_AddedIsActiveFlagToBoats")]
    partial class AddedIsActiveFlagToBoats
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Oib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AvailableTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("SkipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SkipperId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SkipperId");

                    b.HasIndex("SkipperId1");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Boat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoatPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimalRequiredLicense")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharterId");

                    b.ToTable("Boats");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookedTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CrewSize")
                        .HasColumnType("int");

                    b.Property<string>("GuestEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GuestNationalityId")
                        .HasColumnType("int");

                    b.Property<bool>("GuestTos")
                        .HasColumnType("bit");

                    b.Property<string>("OnBoardingLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SkipperRequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoatId");

                    b.HasIndex("CharterId");

                    b.HasIndex("GuestNationalityId");

                    b.HasIndex("SkipperId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.BookingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("BookingRejected")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SkipperId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("SkipperId");

                    b.ToTable("BookingHistories");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoLetterCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoLetterCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseType")
                        .HasColumnType("int");

                    b.Property<string>("LicenseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SkipperId")
                        .IsUnique()
                        .HasFilter("[SkipperId] IS NOT NULL");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.PreRegisterSkipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkipperPreRegistration");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.RegionAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailabilityId")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionAvailabilities");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Icon = "fas fa-utensils",
                            Name = "Cook"
                        },
                        new
                        {
                            Id = 1,
                            Icon = "fas fa-swimmer",
                            Name = "Diving"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "fas fa-search-location",
                            Name = "Local expert"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "fas fa-video",
                            Name = "Video"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "fas fa-camera",
                            Name = "Photo"
                        });
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.SkipperLanguage", b =>
                {
                    b.Property<string>("SkipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LevelOfKnowledge")
                        .HasColumnType("int");

                    b.HasKey("SkipperId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("SkipperLanguages");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.SkipperSkill", b =>
                {
                    b.Property<string>("SkipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("SkipperId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkipperSkills");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.TrustedCharterSkipper", b =>
                {
                    b.Property<string>("SkipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkipperId", "CharterId");

                    b.HasIndex("CharterId");

                    b.ToTable("TrustedSkippers");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.UnTrustedCharterSkipper", b =>
                {
                    b.Property<string>("SkipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharterId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SkipperId", "CharterId");

                    b.HasIndex("CharterId");

                    b.ToTable("UnTrustedSkippers");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Charter", b =>
                {
                    b.HasBaseType("SkipperAgency.Domain.Entities.AppUser");

                    b.Property<string>("CharterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Charter");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Developer", b =>
                {
                    b.HasBaseType("SkipperAgency.Domain.Entities.AppUser");

                    b.HasDiscriminator().HasValue("Developer");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Skipper", b =>
                {
                    b.HasBaseType("SkipperAgency.Domain.Entities.AppUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("YearOfFirstLicense")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Skipper");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkipperAgency.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Country", "Country")
                        .WithMany("AppUsers")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Availability", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.AppUser", "Skipper")
                        .WithMany()
                        .HasForeignKey("SkipperId");

                    b.HasOne("SkipperAgency.Domain.Entities.Skipper", null)
                        .WithMany("Availability")
                        .HasForeignKey("SkipperId1");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Boat", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Charter", "Charter")
                        .WithMany()
                        .HasForeignKey("CharterId");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Boat", "Boat")
                        .WithMany()
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkipperAgency.Domain.Entities.Charter", "Charter")
                        .WithMany("Bookings")
                        .HasForeignKey("CharterId");

                    b.HasOne("SkipperAgency.Domain.Entities.Country", "GuestNationality")
                        .WithMany()
                        .HasForeignKey("GuestNationalityId");

                    b.HasOne("SkipperAgency.Domain.Entities.Skipper", "Skipper")
                        .WithMany("Bookings")
                        .HasForeignKey("SkipperId");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.BookingHistory", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Booking", "Booking")
                        .WithMany("BookingHistories")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkipperAgency.Domain.Entities.Skipper", "Skipper")
                        .WithMany()
                        .HasForeignKey("SkipperId");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.License", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Skipper", "Skipper")
                        .WithOne("License")
                        .HasForeignKey("SkipperAgency.Domain.Entities.License", "SkipperId");
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.RegionAvailability", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Availability", "Availability")
                        .WithMany()
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkipperAgency.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.SkipperLanguage", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Language", "Language")
                        .WithMany("Skippers")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkipperAgency.Domain.Entities.Skipper", "Skipper")
                        .WithMany("ListOfLanguages")
                        .HasForeignKey("SkipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.SkipperSkill", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Skill", "Skill")
                        .WithMany("Skippers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkipperAgency.Domain.Entities.Skipper", "Skipper")
                        .WithMany("ListOfSkills")
                        .HasForeignKey("SkipperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.TrustedCharterSkipper", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Charter", "Charter")
                        .WithMany("TrustedSkippers")
                        .HasForeignKey("CharterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkipperAgency.Domain.Entities.Skipper", "Skipper")
                        .WithMany("TrustedCharters")
                        .HasForeignKey("SkipperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SkipperAgency.Domain.Entities.UnTrustedCharterSkipper", b =>
                {
                    b.HasOne("SkipperAgency.Domain.Entities.Charter", "Charter")
                        .WithMany("UnTrustedSkippers")
                        .HasForeignKey("CharterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkipperAgency.Domain.Entities.Skipper", "Skipper")
                        .WithMany("UnTrustedCharters")
                        .HasForeignKey("SkipperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
